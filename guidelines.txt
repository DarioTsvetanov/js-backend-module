Set an app with - npm init -y
Install all the needed dependencies - npm i express, express-handlebars, mongoose
Install all the needed devDependencies - npm i -D nodemon



Folders needed:
-config with all the configuration
-controllers
-models
-public - css and images
-services
-view - layouts and partials



Create config.js file which includes an object containing development and production settings
const config = {
    development: {
        PORT: 5000
    },
    production: {
        PORT: 80
    }
}
Set the needed scripts in the package.json file 
"start": "SET NODE_ENV=development && nodemon ./index.js",
"prod": "SET NODE_ENV=production && node ./index.js"



Express config
const express = require('express');
const handlebars = require('express-handlebars');

module.exports = function(app) {
    app.engine('hbs', handlebars({
        extname: 'hbs',
    }));
    
    app.set('view engine', 'hbs');
    
    app.use(express.static('public'));

    app.use(express.urlencoded({
        extended: true
    }));
};

Set up a server
const app = express();
app.listen(config.PORT, () => console.log(`Server is running on port ${config.PORT}`));



Mongoose configuration
require('./config/mongoose')();
Export a function:
module.exports = (app) => {
    mongoose.connect('mongodb://localhost/DATABASE NAME', {useNewUrlParser: true, useUnifiedTopology: true});
    const db = mongoose.connection;

    db.on('error', console.error.bind(console, 'connection error:'));
    db.once('open', () => console.log.bind(console, 'Db Connected'));
}
if you cant connect to the db restart mongodb service


Create a view folder with layouts subfolder
Inside of layouts add a main.hbs file containing the repeated elements in all templates
Inside the main template enter the dynamic part {{{ body }}}
Add in the templates {{ title }}

Created a folder with name public containing all the css and images
In the index.js file make the new folder public for everyone
place app.use(express.static('public')); in the config/express.js file - "public" is the name of the folder


STRUCTURE ROUTES -> CONTROLLER -> SERVICE -> DATABASE
In the routes file include { Router } from express
Require all the controllers
Invoke the router const router = Router();
For all the request to /products the productController will be used --- router.use('products', productController); 
Create a redirection for every non-existant page
router.get('*', (req, res) => {
    res.render('404' { title: "titleName" });
});
export the router



In every controller file include { Router } from express
Create a router from Router function -> const router = Router();
router.get('/', (req, res) => {
    res.render('home', { title: "titleName" })
});



For every product create a Schema
require mongoose
const productSchema = new mongoose.Schema({
	propertyName: {
		type: ...,
		required: true/false,
	}
	accessories: [
            {
           	type: mongoose.Types.ObjectId,
            	ref: 'Accessory'
            }
    	]
});
export model
module.exports = mongoose.model('productName', schemaName);

Create a partial template of the product
The Id attribute in mongo in _id

Create a product from model
Import the model
let cube = new Cube(
        data.name,
        data.description,
        data.imageUrl,
        data.difficultyLevel
    );

return cube.save();

In the controller on get action create a function

router.get(/products/:productId, (req, res) => {
    productService.getOne(req.params.productId)
        .then(products => res.render('details', { title: 'Details', products}))
        .catch(err => console.log(err));
    });
})

In product service get all products from database
Create a function
return Cube.findById(id).lean();












